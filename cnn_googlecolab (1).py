# -*- coding: utf-8 -*-
"""CNN_GoogleColab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sW3lFHmKdPQw9j7DoQLsZ0Ep8kapk40v
"""

import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import numpy as np

from google.colab import drive
drive.mount('/content/gdrive')

from traitlets.traitlets import validate
import os
train_image_files_path = '/content/gdrive/MyDrive/ColabNotebooks/CNN/testing/train'
valid_image_files_path = '/content/gdrive/MyDrive/ColabNotebooks/CNN/testing/valid'

label =['Car', 'Traffic jam']

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_data_gen = ImageDataGenerator(rescale = 1/255)
valid_data_gen = ImageDataGenerator(rescale = 1/255)
train_generator = train_data_gen.flow_from_directory(
    train_image_files_path,
    target_size = (50,50),
    class_mode = 'categorical'
)
valid_generator = train_data_gen.flow_from_directory(
    valid_image_files_path,
    target_size = (50,50),
    class_mode = 'categorical'
)

from keras.models import Sequential
from keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten

model = tf.keras.models.Sequential()

#CNN1 Layer
model.add(Conv2D(32,(3,3), activation = 'relu', input_shape = (50,50,3)))
model.add(MaxPooling2D(2,2))

#CNN2 Layer
model.add(Conv2D(64,(3,3), activation = 'relu'))
model.add(MaxPooling2D(2,2))

model.add(Flatten())

#Hidden layer
model.add(Dense(512, activation = tf.nn.relu))

#Output layer: 2 categories
model.add(Dense(2, activation = tf.nn.softmax))

from tensorflow.keras.optimizers import RMSprop
model.compile(optimizer = RMSprop(learning_rate = 0.001),
              loss = 'categorical_crossentropy',
              metrics= ['acc'])

EPOCHS = 10
history = model.fit(
    train_generator,
    steps_per_epoch=1,
    epochs= EPOCHS,
    verbose = 1,
    validation_data = valid_generator,
    validation_steps = 1
)

from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mping
uploaded = files.upload()
for fn in uploaded.keys():
  path = '/content/' + fn
  plt.imshow(mping.imread(path))

  img = image.load_img(path, target_size = (50,50))
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  images = np.vstack([x])
  y_predict = model.predict(images, batch_size = 10)
  print(y_predict)
  print('Predictive value is a', label[np.argmax(y_predict)])